[{"E:\\my-app\\src\\reportWebVitals.js":"1","E:\\my-app\\src\\App.js":"2","E:\\my-app\\src\\FactorParser.js":"3","E:\\my-app\\src\\FactorListener.js":"4","E:\\my-app\\src\\index.js":"5","E:\\my-app\\src\\FactorLexer.js":"6","E:\\my-app\\src\\Antlr4Test.js":"7","E:\\my-app\\src\\FactorErrorListener.js":"8"},{"size":362,"mtime":1606496404923,"results":"9","hashOfConfig":"10"},{"size":528,"mtime":1606496404923,"results":"11","hashOfConfig":"10"},{"size":49587,"mtime":1606531039537,"results":"12","hashOfConfig":"10"},{"size":4191,"mtime":1606531039470,"results":"13","hashOfConfig":"10"},{"size":557,"mtime":1606532883592,"results":"14","hashOfConfig":"10"},{"size":16223,"mtime":1606531039400,"results":"15","hashOfConfig":"10"},{"size":949,"mtime":1606535613010,"results":"16","hashOfConfig":"10"},{"size":188,"mtime":1606535229781,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kd5i67",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\my-app\\src\\reportWebVitals.js",[],"E:\\my-app\\src\\App.js",[],"E:\\my-app\\src\\FactorParser.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"// Generated from Factor.g4 by ANTLR 4.9\r\n// jshint ignore: start\r\nimport antlr4 from 'antlr4';\r\nimport FactorListener from './FactorListener.js';\r\n\r\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\r\n    \"\\u5964\\u0003-o\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0003\\u0002\\u0003\",\r\n    \"\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\",\r\n    \"\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0005\",\r\n    \"\\u0002\\u0014\\n\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0005\\u0002\\u001b\\n\\u0002\\u0003\\u0002\\u0003\\u0002\\u0007\",\r\n    \"\\u0002\\u001f\\n\\u0002\\f\\u0002\\u000e\\u0002\\\"\\u000b\\u0002\\u0003\\u0002\\u0003\",\r\n    \"\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0007\",\r\n    \"\\u0002+\\n\\u0002\\f\\u0002\\u000e\\u0002.\\u000b\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0005\\u00025\\n\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0005\\u00029\\n\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0005\\u0002>\\n\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0007\\u0002\",\r\n    \"g\\n\\u0002\\f\\u0002\\u000e\\u0002j\\u000b\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003,\\u0003\\u0002\\u0004\\u0002\\u0004\\u0002\\f\\u0003\",\r\n    \"\\u0002\\u000f\\u0010\\u0003\\u0002\\\"#\\u0003\\u0002\\u0011\\u0013\\u0004\\u0002\",\r\n    \"\\u0015\\u0016\\u0019\\u001a\\u0003\\u0002\\u0017\\u0018\\u0004\\u0002\\u001b\\u001b\",\r\n    \"\\u001d\\u001d\\u0004\\u0002\\u001c\\u001c\\u001e\\u001e\\u0003\\u0002\\u001f \",\r\n    \"\\u0004\\u0002\\n\\n\\f\\f\\u0004\\u0002\\u000b\\u000b\\r\\r\\u0002\\u0089\\u0002=\",\r\n    \"\\u0003\\u0002\\u0002\\u0002\\u0004k\\u0003\\u0002\\u0002\\u0002\\u0006\\u0007\",\r\n    \"\\b\\u0002\\u0001\\u0002\\u0007\\b\\u0007\\f\\u0002\\u0002\\b\\t\\u0005\\u0002\\u0002\",\r\n    \"\\u0002\\t\\n\\u0007\\r\\u0002\\u0002\\n>\\u0003\\u0002\\u0002\\u0002\\u000b\\f\\t\",\r\n    \"\\u0002\\u0002\\u0002\\f>\\u0005\\u0002\\u0002\\u0015\\r\\u000e\\u0007\\u0014\\u0002\",\r\n    \"\\u0002\\u000e>\\u0005\\u0002\\u0002\\u0014\\u000f\\u0010\\u0007!\\u0002\\u0002\",\r\n    \"\\u0010\\u0013\\u0007\\f\\u0002\\u0002\\u0011\\u0014\\u0005\\u0002\\u0002\\u0002\",\r\n    \"\\u0012\\u0014\\u0007\\u0003\\u0002\\u0002\\u0013\\u0011\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0013\\u0012\\u0003\\u0002\\u0002\\u0002\\u0014\\u0015\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0015\\u0016\\u0007\\u0004\\u0002\\u0002\\u0016 \\u0005\\u0002\\u0002\\u0002\",\r\n    \"\\u0017\\u001a\\u0007\\u000e\\u0002\\u0002\\u0018\\u001b\\u0005\\u0002\\u0002\\u0002\",\r\n    \"\\u0019\\u001b\\u0007\\u0003\\u0002\\u0002\\u001a\\u0018\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u001a\\u0019\\u0003\\u0002\\u0002\\u0002\\u001b\\u001c\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u001c\\u001d\\u0007\\u0004\\u0002\\u0002\\u001d\\u001f\\u0005\\u0002\\u0002\\u0002\",\r\n    \"\\u001e\\u0017\\u0003\\u0002\\u0002\\u0002\\u001f\\\"\\u0003\\u0002\\u0002\\u0002\",\r\n    \" \\u001e\\u0003\\u0002\\u0002\\u0002 !\\u0003\\u0002\\u0002\\u0002!#\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\\" \\u0003\\u0002\\u0002\\u0002#$\\u0007\\r\\u0002\\u0002$>\\u0003\",\r\n    \"\\u0002\\u0002\\u0002%>\\t\\u0003\\u0002\\u0002&,\\u0007\\u0007\\u0002\\u0002\\'\",\r\n    \"+\\u0007\\b\\u0002\\u0002(+\\u0007\\t\\u0002\\u0002)+\\u000b\\u0002\\u0002\\u0002\",\r\n    \"*\\'\\u0003\\u0002\\u0002\\u0002*(\\u0003\\u0002\\u0002\\u0002*)\\u0003\\u0002\",\r\n    \"\\u0002\\u0002+.\\u0003\\u0002\\u0002\\u0002,-\\u0003\\u0002\\u0002\\u0002,*\\u0003\",\r\n    \"\\u0002\\u0002\\u0002-/\\u0003\\u0002\\u0002\\u0002.,\\u0003\\u0002\\u0002\\u0002\",\r\n    \"/>\\u0007\\u0007\\u0002\\u00020>\\u0007)\\u0002\\u00021>\\u0007%\\u0002\\u0002\",\r\n    \"24\\u0007&\\u0002\\u000235\\u0007\\u0013\\u0002\\u000243\\u0003\\u0002\\u0002\",\r\n    \"\\u000245\\u0003\\u0002\\u0002\\u000259\\u0003\\u0002\\u0002\\u000267\\u0007%\",\r\n    \"\\u0002\\u000279\\u0007\\u0013\\u0002\\u000282\\u0003\\u0002\\u0002\\u000286\\u0003\",\r\n    \"\\u0002\\u0002\\u00029>\\u0003\\u0002\\u0002\\u0002:>\\u0007$\\u0002\\u0002;>\",\r\n    \"\\u0007+\\u0002\\u0002<>\\u0007,\\u0002\\u0002=\\u0006\\u0003\\u0002\\u0002\\u0002\",\r\n    \"=\\u000b\\u0003\\u0002\\u0002\\u0002=\\r\\u0003\\u0002\\u0002\\u0002=\\u000f\\u0003\",\r\n    \"\\u0002\\u0002\\u0002=%\\u0003\\u0002\\u0002\\u0002=&\\u0003\\u0002\\u0002\\u0002\",\r\n    \"=0\\u0003\\u0002\\u0002\\u0002=1\\u0003\\u0002\\u0002\\u0002=8\\u0003\\u0002\\u0002\",\r\n    \"\\u0002=:\\u0003\\u0002\\u0002\\u0002=;\\u0003\\u0002\\u0002\\u0002=<\\u0003\\u0002\",\r\n    \"\\u0002\\u0002>h\\u0003\\u0002\\u0002\\u0002?@\\f\\u0012\\u0002\\u0002@A\\t\\u0004\",\r\n    \"\\u0002\\u0002Ag\\u0005\\u0002\\u0002\\u0013BC\\f\\u0011\\u0002\\u0002CD\\t\\u0002\",\r\n    \"\\u0002\\u0002Dg\\u0005\\u0002\\u0002\\u0012EF\\f\\u000f\\u0002\\u0002FG\\t\\u0005\",\r\n    \"\\u0002\\u0002Gg\\u0005\\u0002\\u0002\\u0010HI\\f\\u000e\\u0002\\u0002IJ\\t\\u0006\",\r\n    \"\\u0002\\u0002Jg\\u0005\\u0002\\u0002\\u000fKL\\f\\r\\u0002\\u0002LM\\t\\u0007\\u0002\",\r\n    \"\\u0002Mg\\u0005\\u0002\\u0002\\u000eNO\\f\\f\\u0002\\u0002OP\\t\\b\\u0002\\u0002\",\r\n    \"Pg\\u0005\\u0002\\u0002\\rQR\\f\\u000b\\u0002\\u0002RS\\u0007\\u0005\\u0002\\u0002\",\r\n    \"ST\\u0005\\u0002\\u0002\\u0002TU\\u0007\\u0006\\u0002\\u0002UV\\u0005\\u0002\\u0002\",\r\n    \"\\fVg\\u0003\\u0002\\u0002\\u0002WX\\f\\u0018\\u0002\\u0002Xg\\u0007*\\u0002\\u0002\",\r\n    \"YZ\\f\\u0017\\u0002\\u0002Z[\\u0007\\n\\u0002\\u0002[\\\\\\u0005\\u0002\\u0002\\u0002\",\r\n    \"\\\\]\\u0007\\u000b\\u0002\\u0002]g\\u0003\\u0002\\u0002\\u0002^_\\f\\u0010\\u0002\",\r\n    \"\\u0002_`\\t\\t\\u0002\\u0002`a\\t\\n\\u0002\\u0002ab\\u0005\\u0002\\u0002\\u0002\",\r\n    \"bc\\u0007\\u000e\\u0002\\u0002cd\\u0005\\u0002\\u0002\\u0002de\\t\\u000b\\u0002\",\r\n    \"\\u0002eg\\u0003\\u0002\\u0002\\u0002f?\\u0003\\u0002\\u0002\\u0002fB\\u0003\\u0002\",\r\n    \"\\u0002\\u0002fE\\u0003\\u0002\\u0002\\u0002fH\\u0003\\u0002\\u0002\\u0002fK\\u0003\",\r\n    \"\\u0002\\u0002\\u0002fN\\u0003\\u0002\\u0002\\u0002fQ\\u0003\\u0002\\u0002\\u0002\",\r\n    \"fW\\u0003\\u0002\\u0002\\u0002fY\\u0003\\u0002\\u0002\\u0002f^\\u0003\\u0002\\u0002\",\r\n    \"\\u0002gj\\u0003\\u0002\\u0002\\u0002hf\\u0003\\u0002\\u0002\\u0002hi\\u0003\\u0002\",\r\n    \"\\u0002\\u0002i\\u0003\\u0003\\u0002\\u0002\\u0002jh\\u0003\\u0002\\u0002\\u0002\",\r\n    \"kl\\u0005\\u0002\\u0002\\u0002lm\\u0007\\u0002\\u0002\\u0003m\\u0005\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\f\\u0013\\u001a *,48=fh\"].join(\"\");\r\n\r\n\r\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\r\n\r\nconst sharedContextCache = new antlr4.PredictionContextCache();\r\n\r\nexport default class FactorParser extends antlr4.Parser {\r\n\r\n    static grammarFileName = \"Factor.g4\";\r\n    static literalNames = [ null, \"'_'\", \"'=>'\", \"'?'\", \"':'\", \"'\\\"'\", \"'\\\\\\\"'\", \r\n                            \"'\\\\\\\\'\", \"'['\", \"']'\", \"'('\", \"')'\", \"','\", \r\n                            \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'%'\", \"'!'\", \"'<'\", \r\n                            \"'>'\", \"'=='\", \"'!='\", \"'<='\", \"'>='\", \"'&&'\", \r\n                            \"'||'\" ];\r\n    static symbolicNames = [ null, null, null, null, null, null, null, null, \r\n                             \"OPEN_BRACKET\", \"ClOSE_BRACKET\", \"OPEN_PARENS\", \r\n                             \"CLOSE_PARENS\", \"COMMA\", \"PLUS\", \"MINUS\", \"STAR\", \r\n                             \"DIV\", \"PERCENT\", \"BANG\", \"OP_LT\", \"OP_GT\", \r\n                             \"OP_EQ\", \"OP_NE\", \"OP_LE\", \"OP_GE\", \"OP_AND\", \r\n                             \"OP_OR\", \"AND\", \"OR\", \"IN\", \"NOTIN\", \"SWITCH\", \r\n                             \"TRUE\", \"FALSE\", \"NULL\", \"UINT\", \"DECIMAL\", \r\n                             \"NUMERIC\", \"CURRENCY\", \"MONEY\", \"PROPERTY\", \r\n                             \"ID\", \"SUBFORMULA\", \"WS\" ];\r\n    static ruleNames = [ \"expression\", \"prog\" ];\r\n\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\r\n        this.ruleNames = FactorParser.ruleNames;\r\n        this.literalNames = FactorParser.literalNames;\r\n        this.symbolicNames = FactorParser.symbolicNames;\r\n    }\r\n\r\n    get atn() {\r\n        return atn;\r\n    }\r\n\r\n    sempred(localctx, ruleIndex, predIndex) {\r\n    \tswitch(ruleIndex) {\r\n    \tcase 0:\r\n    \t    \t\treturn this.expression_sempred(localctx, predIndex);\r\n        default:\r\n            throw \"No predicate with index:\" + ruleIndex;\r\n       }\r\n    }\r\n\r\n    expression_sempred(localctx, predIndex) {\r\n    \tswitch(predIndex) {\r\n    \t\tcase 0:\r\n    \t\t\treturn this.precpred(this._ctx, 16);\r\n    \t\tcase 1:\r\n    \t\t\treturn this.precpred(this._ctx, 15);\r\n    \t\tcase 2:\r\n    \t\t\treturn this.precpred(this._ctx, 13);\r\n    \t\tcase 3:\r\n    \t\t\treturn this.precpred(this._ctx, 12);\r\n    \t\tcase 4:\r\n    \t\t\treturn this.precpred(this._ctx, 11);\r\n    \t\tcase 5:\r\n    \t\t\treturn this.precpred(this._ctx, 10);\r\n    \t\tcase 6:\r\n    \t\t\treturn this.precpred(this._ctx, 9);\r\n    \t\tcase 7:\r\n    \t\t\treturn this.precpred(this._ctx, 22);\r\n    \t\tcase 8:\r\n    \t\t\treturn this.precpred(this._ctx, 21);\r\n    \t\tcase 9:\r\n    \t\t\treturn this.precpred(this._ctx, 14);\r\n    \t\tdefault:\r\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\r\n    \t}\r\n    };\r\n\r\n\r\n\r\n\texpression(_p) {\r\n\t\tif(_p===undefined) {\r\n\t\t    _p = 0;\r\n\t\t}\r\n\t    const _parentctx = this._ctx;\r\n\t    const _parentState = this.state;\r\n\t    let localctx = new ExpressionContext(this, this._ctx, _parentState);\r\n\t    let _prevctx = localctx;\r\n\t    const _startState = 0;\r\n\t    this.enterRecursionRule(localctx, 0, FactorParser.RULE_expression, _p);\r\n\t    var _la = 0; // Token type\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 59;\r\n\t        this._errHandler.sync(this);\r\n\t        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);\r\n\t        switch(la_) {\r\n\t        case 1:\r\n\t            localctx = new SubExpressionContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\r\n\t            this.state = 5;\r\n\t            this.match(FactorParser.OPEN_PARENS);\r\n\t            this.state = 6;\r\n\t            this.expression(0);\r\n\t            this.state = 7;\r\n\t            this.match(FactorParser.CLOSE_PARENS);\r\n\t            break;\r\n\r\n\t        case 2:\r\n\t            localctx = new NegativeContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 9;\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===FactorParser.PLUS || _la===FactorParser.MINUS)) {\r\n\t            this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            this.state = 10;\r\n\t            this.expression(19);\r\n\t            break;\r\n\r\n\t        case 3:\r\n\t            localctx = new NonContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 11;\r\n\t            this.match(FactorParser.BANG);\r\n\t            this.state = 12;\r\n\t            this.expression(18);\r\n\t            break;\r\n\r\n\t        case 4:\r\n\t            localctx = new SwitchContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 13;\r\n\t            this.match(FactorParser.SWITCH);\r\n\t            this.state = 14;\r\n\t            this.match(FactorParser.OPEN_PARENS);\r\n\t            this.state = 17;\r\n\t            this._errHandler.sync(this);\r\n\t            switch(this._input.LA(1)) {\r\n\t            case FactorParser.T__4:\r\n\t            case FactorParser.OPEN_PARENS:\r\n\t            case FactorParser.PLUS:\r\n\t            case FactorParser.MINUS:\r\n\t            case FactorParser.BANG:\r\n\t            case FactorParser.SWITCH:\r\n\t            case FactorParser.TRUE:\r\n\t            case FactorParser.FALSE:\r\n\t            case FactorParser.NULL:\r\n\t            case FactorParser.UINT:\r\n\t            case FactorParser.DECIMAL:\r\n\t            case FactorParser.MONEY:\r\n\t            case FactorParser.ID:\r\n\t            case FactorParser.SUBFORMULA:\r\n\t                this.state = 15;\r\n\t                this.expression(0);\r\n\t                break;\r\n\t            case FactorParser.T__0:\r\n\t                this.state = 16;\r\n\t                this.match(FactorParser.T__0);\r\n\t                break;\r\n\t            default:\r\n\t                throw new antlr4.error.NoViableAltException(this);\r\n\t            }\r\n\t            this.state = 19;\r\n\t            this.match(FactorParser.T__1);\r\n\t            this.state = 20;\r\n\t            this.expression(0);\r\n\t            this.state = 30;\r\n\t            this._errHandler.sync(this);\r\n\t            _la = this._input.LA(1);\r\n\t            while(_la===FactorParser.COMMA) {\r\n\t                this.state = 21;\r\n\t                this.match(FactorParser.COMMA);\r\n\t                this.state = 24;\r\n\t                this._errHandler.sync(this);\r\n\t                switch(this._input.LA(1)) {\r\n\t                case FactorParser.T__4:\r\n\t                case FactorParser.OPEN_PARENS:\r\n\t                case FactorParser.PLUS:\r\n\t                case FactorParser.MINUS:\r\n\t                case FactorParser.BANG:\r\n\t                case FactorParser.SWITCH:\r\n\t                case FactorParser.TRUE:\r\n\t                case FactorParser.FALSE:\r\n\t                case FactorParser.NULL:\r\n\t                case FactorParser.UINT:\r\n\t                case FactorParser.DECIMAL:\r\n\t                case FactorParser.MONEY:\r\n\t                case FactorParser.ID:\r\n\t                case FactorParser.SUBFORMULA:\r\n\t                    this.state = 22;\r\n\t                    this.expression(0);\r\n\t                    break;\r\n\t                case FactorParser.T__0:\r\n\t                    this.state = 23;\r\n\t                    this.match(FactorParser.T__0);\r\n\t                    break;\r\n\t                default:\r\n\t                    throw new antlr4.error.NoViableAltException(this);\r\n\t                }\r\n\t                this.state = 26;\r\n\t                this.match(FactorParser.T__1);\r\n\t                this.state = 27;\r\n\t                this.expression(0);\r\n\t                this.state = 32;\r\n\t                this._errHandler.sync(this);\r\n\t                _la = this._input.LA(1);\r\n\t            }\r\n\t            this.state = 33;\r\n\t            this.match(FactorParser.CLOSE_PARENS);\r\n\t            break;\r\n\r\n\t        case 5:\r\n\t            localctx = new BooleanContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 35;\r\n\t            _la = this._input.LA(1);\r\n\t            if(!(_la===FactorParser.TRUE || _la===FactorParser.FALSE)) {\r\n\t            this._errHandler.recoverInline(this);\r\n\t            }\r\n\t            else {\r\n\t            \tthis._errHandler.reportMatch(this);\r\n\t                this.consume();\r\n\t            }\r\n\t            break;\r\n\r\n\t        case 6:\r\n\t            localctx = new StringContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 36;\r\n\t            this.match(FactorParser.T__4);\r\n\t            this.state = 42;\r\n\t            this._errHandler.sync(this);\r\n\t            let _alt = this._interp.adaptivePredict(this._input,4,this._ctx)\r\n\t            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n\t                if(_alt===1+1) {\r\n\t                    this.state = 40;\r\n\t                    this._errHandler.sync(this);\r\n\t                    var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);\r\n\t                    switch(la_) {\r\n\t                    case 1:\r\n\t                        this.state = 37;\r\n\t                        this.match(FactorParser.T__5);\r\n\t                        break;\r\n\r\n\t                    case 2:\r\n\t                        this.state = 38;\r\n\t                        this.match(FactorParser.T__6);\r\n\t                        break;\r\n\r\n\t                    case 3:\r\n\t                        this.state = 39;\r\n\t                        this.matchWildcard();\r\n\t                        break;\r\n\r\n\t                    } \r\n\t                }\r\n\t                this.state = 44;\r\n\t                this._errHandler.sync(this);\r\n\t                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);\r\n\t            }\r\n\r\n\t            this.state = 45;\r\n\t            this.match(FactorParser.T__4);\r\n\t            break;\r\n\r\n\t        case 7:\r\n\t            localctx = new MoneyContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 46;\r\n\t            this.match(FactorParser.MONEY);\r\n\t            break;\r\n\r\n\t        case 8:\r\n\t            localctx = new UintContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 47;\r\n\t            this.match(FactorParser.UINT);\r\n\t            break;\r\n\r\n\t        case 9:\r\n\t            localctx = new DecimalContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 54;\r\n\t            this._errHandler.sync(this);\r\n\t            switch(this._input.LA(1)) {\r\n\t            case FactorParser.DECIMAL:\r\n\t                this.state = 48;\r\n\t                this.match(FactorParser.DECIMAL);\r\n\t                this.state = 50;\r\n\t                this._errHandler.sync(this);\r\n\t                var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);\r\n\t                if(la_===1) {\r\n\t                    this.state = 49;\r\n\t                    this.match(FactorParser.PERCENT);\r\n\r\n\t                }\r\n\t                break;\r\n\t            case FactorParser.UINT:\r\n\t                this.state = 52;\r\n\t                this.match(FactorParser.UINT);\r\n\t                this.state = 53;\r\n\t                this.match(FactorParser.PERCENT);\r\n\t                break;\r\n\t            default:\r\n\t                throw new antlr4.error.NoViableAltException(this);\r\n\t            }\r\n\t            break;\r\n\r\n\t        case 10:\r\n\t            localctx = new NullContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 56;\r\n\t            this.match(FactorParser.NULL);\r\n\t            break;\r\n\r\n\t        case 11:\r\n\t            localctx = new FieldContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 57;\r\n\t            this.match(FactorParser.ID);\r\n\t            break;\r\n\r\n\t        case 12:\r\n\t            localctx = new SubFormulaContext(this, localctx);\r\n\t            this._ctx = localctx;\r\n\t            _prevctx = localctx;\r\n\t            this.state = 58;\r\n\t            this.match(FactorParser.SUBFORMULA);\r\n\t            break;\r\n\r\n\t        }\r\n\t        this._ctx.stop = this._input.LT(-1);\r\n\t        this.state = 102;\r\n\t        this._errHandler.sync(this);\r\n\t        let _alt = this._interp.adaptivePredict(this._input,9,this._ctx)\r\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n\t            if(_alt===1) {\r\n\t                if(this._parseListeners!==null) {\r\n\t                    this.triggerExitRuleEvent();\r\n\t                }\r\n\t                _prevctx = localctx;\r\n\t                this.state = 100;\r\n\t                this._errHandler.sync(this);\r\n\t                var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);\r\n\t                switch(la_) {\r\n\t                case 1:\r\n\t                    localctx = new MultiplicativeContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 61;\r\n\t                    if (!( this.precpred(this._ctx, 16))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 16)\");\r\n\t                    }\r\n\t                    this.state = 62;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FactorParser.STAR) | (1 << FactorParser.DIV) | (1 << FactorParser.PERCENT))) !== 0))) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 63;\r\n\t                    this.expression(17);\r\n\t                    break;\r\n\r\n\t                case 2:\r\n\t                    localctx = new AdditiveContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 64;\r\n\t                    if (!( this.precpred(this._ctx, 15))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 15)\");\r\n\t                    }\r\n\t                    this.state = 65;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.PLUS || _la===FactorParser.MINUS)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 66;\r\n\t                    this.expression(16);\r\n\t                    break;\r\n\r\n\t                case 3:\r\n\t                    localctx = new RelationalContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 67;\r\n\t                    if (!( this.precpred(this._ctx, 13))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 13)\");\r\n\t                    }\r\n\t                    this.state = 68;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FactorParser.OP_LT) | (1 << FactorParser.OP_GT) | (1 << FactorParser.OP_LE) | (1 << FactorParser.OP_GE))) !== 0))) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 69;\r\n\t                    this.expression(14);\r\n\t                    break;\r\n\r\n\t                case 4:\r\n\t                    localctx = new EqualityContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 70;\r\n\t                    if (!( this.precpred(this._ctx, 12))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 12)\");\r\n\t                    }\r\n\t                    this.state = 71;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.OP_EQ || _la===FactorParser.OP_NE)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 72;\r\n\t                    this.expression(13);\r\n\t                    break;\r\n\r\n\t                case 5:\r\n\t                    localctx = new AndContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 73;\r\n\t                    if (!( this.precpred(this._ctx, 11))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 11)\");\r\n\t                    }\r\n\t                    this.state = 74;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.OP_AND || _la===FactorParser.AND)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 75;\r\n\t                    this.expression(12);\r\n\t                    break;\r\n\r\n\t                case 6:\r\n\t                    localctx = new OrContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 76;\r\n\t                    if (!( this.precpred(this._ctx, 10))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 10)\");\r\n\t                    }\r\n\t                    this.state = 77;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.OP_OR || _la===FactorParser.OR)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 78;\r\n\t                    this.expression(11);\r\n\t                    break;\r\n\r\n\t                case 7:\r\n\t                    localctx = new ConditionalContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 79;\r\n\t                    if (!( this.precpred(this._ctx, 9))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 9)\");\r\n\t                    }\r\n\t                    this.state = 80;\r\n\t                    this.match(FactorParser.T__2);\r\n\t                    this.state = 81;\r\n\t                    this.expression(0);\r\n\t                    this.state = 82;\r\n\t                    this.match(FactorParser.T__3);\r\n\t                    this.state = 83;\r\n\t                    this.expression(10);\r\n\t                    break;\r\n\r\n\t                case 8:\r\n\t                    localctx = new PropertyContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 85;\r\n\t                    if (!( this.precpred(this._ctx, 22))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 22)\");\r\n\t                    }\r\n\t                    this.state = 86;\r\n\t                    this.match(FactorParser.PROPERTY);\r\n\t                    break;\r\n\r\n\t                case 9:\r\n\t                    localctx = new IndexContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 87;\r\n\t                    if (!( this.precpred(this._ctx, 21))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 21)\");\r\n\t                    }\r\n\t                    this.state = 88;\r\n\t                    this.match(FactorParser.OPEN_BRACKET);\r\n\t                    this.state = 89;\r\n\t                    this.expression(0);\r\n\t                    this.state = 90;\r\n\t                    this.match(FactorParser.ClOSE_BRACKET);\r\n\t                    break;\r\n\r\n\t                case 10:\r\n\t                    localctx = new InContext(this, new ExpressionContext(this, _parentctx, _parentState));\r\n\t                    this.pushNewRecursionContext(localctx, _startState, FactorParser.RULE_expression);\r\n\t                    this.state = 92;\r\n\t                    if (!( this.precpred(this._ctx, 14))) {\r\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 14)\");\r\n\t                    }\r\n\t                    this.state = 93;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.IN || _la===FactorParser.NOTIN)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 94;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.OPEN_BRACKET || _la===FactorParser.OPEN_PARENS)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    this.state = 95;\r\n\t                    this.expression(0);\r\n\t                    this.state = 96;\r\n\t                    this.match(FactorParser.COMMA);\r\n\t                    this.state = 97;\r\n\t                    this.expression(0);\r\n\t                    this.state = 98;\r\n\t                    _la = this._input.LA(1);\r\n\t                    if(!(_la===FactorParser.ClOSE_BRACKET || _la===FactorParser.CLOSE_PARENS)) {\r\n\t                    this._errHandler.recoverInline(this);\r\n\t                    }\r\n\t                    else {\r\n\t                    \tthis._errHandler.reportMatch(this);\r\n\t                        this.consume();\r\n\t                    }\r\n\t                    break;\r\n\r\n\t                } \r\n\t            }\r\n\t            this.state = 104;\r\n\t            this._errHandler.sync(this);\r\n\t            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);\r\n\t        }\r\n\r\n\t    } catch( error) {\r\n\t        if(error instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = error;\r\n\t\t        this._errHandler.reportError(this, error);\r\n\t\t        this._errHandler.recover(this, error);\r\n\t\t    } else {\r\n\t\t    \tthrow error;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.unrollRecursionContexts(_parentctx)\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n\r\n\tprog() {\r\n\t    let localctx = new ProgContext(this, this._ctx, this.state);\r\n\t    this.enterRule(localctx, 2, FactorParser.RULE_prog);\r\n\t    try {\r\n\t        this.enterOuterAlt(localctx, 1);\r\n\t        this.state = 105;\r\n\t        this.expression(0);\r\n\t        this.state = 106;\r\n\t        this.match(FactorParser.EOF);\r\n\t    } catch (re) {\r\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t\t        localctx.exception = re;\r\n\t\t        this._errHandler.reportError(this, re);\r\n\t\t        this._errHandler.recover(this, re);\r\n\t\t    } else {\r\n\t\t    \tthrow re;\r\n\t\t    }\r\n\t    } finally {\r\n\t        this.exitRule();\r\n\t    }\r\n\t    return localctx;\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.EOF = antlr4.Token.EOF;\r\nFactorParser.T__0 = 1;\r\nFactorParser.T__1 = 2;\r\nFactorParser.T__2 = 3;\r\nFactorParser.T__3 = 4;\r\nFactorParser.T__4 = 5;\r\nFactorParser.T__5 = 6;\r\nFactorParser.T__6 = 7;\r\nFactorParser.OPEN_BRACKET = 8;\r\nFactorParser.ClOSE_BRACKET = 9;\r\nFactorParser.OPEN_PARENS = 10;\r\nFactorParser.CLOSE_PARENS = 11;\r\nFactorParser.COMMA = 12;\r\nFactorParser.PLUS = 13;\r\nFactorParser.MINUS = 14;\r\nFactorParser.STAR = 15;\r\nFactorParser.DIV = 16;\r\nFactorParser.PERCENT = 17;\r\nFactorParser.BANG = 18;\r\nFactorParser.OP_LT = 19;\r\nFactorParser.OP_GT = 20;\r\nFactorParser.OP_EQ = 21;\r\nFactorParser.OP_NE = 22;\r\nFactorParser.OP_LE = 23;\r\nFactorParser.OP_GE = 24;\r\nFactorParser.OP_AND = 25;\r\nFactorParser.OP_OR = 26;\r\nFactorParser.AND = 27;\r\nFactorParser.OR = 28;\r\nFactorParser.IN = 29;\r\nFactorParser.NOTIN = 30;\r\nFactorParser.SWITCH = 31;\r\nFactorParser.TRUE = 32;\r\nFactorParser.FALSE = 33;\r\nFactorParser.NULL = 34;\r\nFactorParser.UINT = 35;\r\nFactorParser.DECIMAL = 36;\r\nFactorParser.NUMERIC = 37;\r\nFactorParser.CURRENCY = 38;\r\nFactorParser.MONEY = 39;\r\nFactorParser.PROPERTY = 40;\r\nFactorParser.ID = 41;\r\nFactorParser.SUBFORMULA = 42;\r\nFactorParser.WS = 43;\r\n\r\nFactorParser.RULE_expression = 0;\r\nFactorParser.RULE_prog = 1;\r\n\r\nclass ExpressionContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = FactorParser.RULE_expression;\r\n    }\r\n\r\n\r\n\t \r\n\t\tcopyFrom(ctx) {\r\n\t\t\tsuper.copyFrom(ctx);\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nclass NullContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tNULL() {\r\n\t    return this.getToken(FactorParser.NULL, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterNull(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitNull(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.NullContext = NullContext;\r\n\r\nclass OrContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tOP_OR() {\r\n\t    return this.getToken(FactorParser.OP_OR, 0);\r\n\t};\r\n\r\n\tOR() {\r\n\t    return this.getToken(FactorParser.OR, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterOr(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitOr(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.OrContext = OrContext;\r\n\r\nclass InContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tCOMMA() {\r\n\t    return this.getToken(FactorParser.COMMA, 0);\r\n\t};\r\n\r\n\tIN() {\r\n\t    return this.getToken(FactorParser.IN, 0);\r\n\t};\r\n\r\n\tNOTIN() {\r\n\t    return this.getToken(FactorParser.NOTIN, 0);\r\n\t};\r\n\r\n\tOPEN_BRACKET() {\r\n\t    return this.getToken(FactorParser.OPEN_BRACKET, 0);\r\n\t};\r\n\r\n\tOPEN_PARENS() {\r\n\t    return this.getToken(FactorParser.OPEN_PARENS, 0);\r\n\t};\r\n\r\n\tClOSE_BRACKET() {\r\n\t    return this.getToken(FactorParser.ClOSE_BRACKET, 0);\r\n\t};\r\n\r\n\tCLOSE_PARENS() {\r\n\t    return this.getToken(FactorParser.CLOSE_PARENS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterIn(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitIn(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.InContext = InContext;\r\n\r\nclass SubFormulaContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tSUBFORMULA() {\r\n\t    return this.getToken(FactorParser.SUBFORMULA, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterSubFormula(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitSubFormula(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.SubFormulaContext = SubFormulaContext;\r\n\r\nclass RelationalContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tOP_GT() {\r\n\t    return this.getToken(FactorParser.OP_GT, 0);\r\n\t};\r\n\r\n\tOP_LT() {\r\n\t    return this.getToken(FactorParser.OP_LT, 0);\r\n\t};\r\n\r\n\tOP_GE() {\r\n\t    return this.getToken(FactorParser.OP_GE, 0);\r\n\t};\r\n\r\n\tOP_LE() {\r\n\t    return this.getToken(FactorParser.OP_LE, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterRelational(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitRelational(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.RelationalContext = RelationalContext;\r\n\r\nclass ConditionalContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterConditional(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitConditional(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.ConditionalContext = ConditionalContext;\r\n\r\nclass IndexContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tOPEN_BRACKET() {\r\n\t    return this.getToken(FactorParser.OPEN_BRACKET, 0);\r\n\t};\r\n\r\n\tClOSE_BRACKET() {\r\n\t    return this.getToken(FactorParser.ClOSE_BRACKET, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterIndex(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitIndex(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.IndexContext = IndexContext;\r\n\r\nclass StringContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterString(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitString(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.StringContext = StringContext;\r\n\r\nclass NonContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tBANG() {\r\n\t    return this.getToken(FactorParser.BANG, 0);\r\n\t};\r\n\r\n\texpression() {\r\n\t    return this.getTypedRuleContext(ExpressionContext,0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterNon(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitNon(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.NonContext = NonContext;\r\n\r\nclass AdditiveContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tPLUS() {\r\n\t    return this.getToken(FactorParser.PLUS, 0);\r\n\t};\r\n\r\n\tMINUS() {\r\n\t    return this.getToken(FactorParser.MINUS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterAdditive(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitAdditive(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.AdditiveContext = AdditiveContext;\r\n\r\nclass FieldContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tID() {\r\n\t    return this.getToken(FactorParser.ID, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterField(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitField(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.FieldContext = FieldContext;\r\n\r\nclass UintContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tUINT() {\r\n\t    return this.getToken(FactorParser.UINT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterUint(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitUint(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.UintContext = UintContext;\r\n\r\nclass MultiplicativeContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tSTAR() {\r\n\t    return this.getToken(FactorParser.STAR, 0);\r\n\t};\r\n\r\n\tDIV() {\r\n\t    return this.getToken(FactorParser.DIV, 0);\r\n\t};\r\n\r\n\tPERCENT() {\r\n\t    return this.getToken(FactorParser.PERCENT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterMultiplicative(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitMultiplicative(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.MultiplicativeContext = MultiplicativeContext;\r\n\r\nclass NegativeContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression() {\r\n\t    return this.getTypedRuleContext(ExpressionContext,0);\r\n\t};\r\n\r\n\tPLUS() {\r\n\t    return this.getToken(FactorParser.PLUS, 0);\r\n\t};\r\n\r\n\tMINUS() {\r\n\t    return this.getToken(FactorParser.MINUS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterNegative(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitNegative(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.NegativeContext = NegativeContext;\r\n\r\nclass SwitchContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tSWITCH() {\r\n\t    return this.getToken(FactorParser.SWITCH, 0);\r\n\t};\r\n\r\n\tOPEN_PARENS() {\r\n\t    return this.getToken(FactorParser.OPEN_PARENS, 0);\r\n\t};\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tCLOSE_PARENS() {\r\n\t    return this.getToken(FactorParser.CLOSE_PARENS, 0);\r\n\t};\r\n\r\n\tCOMMA = function(i) {\r\n\t\tif(i===undefined) {\r\n\t\t\ti = null;\r\n\t\t}\r\n\t    if(i===null) {\r\n\t        return this.getTokens(FactorParser.COMMA);\r\n\t    } else {\r\n\t        return this.getToken(FactorParser.COMMA, i);\r\n\t    }\r\n\t};\r\n\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterSwitch(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitSwitch(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.SwitchContext = SwitchContext;\r\n\r\nclass MoneyContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tMONEY() {\r\n\t    return this.getToken(FactorParser.MONEY, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterMoney(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitMoney(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.MoneyContext = MoneyContext;\r\n\r\nclass DecimalContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tDECIMAL() {\r\n\t    return this.getToken(FactorParser.DECIMAL, 0);\r\n\t};\r\n\r\n\tUINT() {\r\n\t    return this.getToken(FactorParser.UINT, 0);\r\n\t};\r\n\r\n\tPERCENT() {\r\n\t    return this.getToken(FactorParser.PERCENT, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterDecimal(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitDecimal(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.DecimalContext = DecimalContext;\r\n\r\nclass AndContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tOP_AND() {\r\n\t    return this.getToken(FactorParser.OP_AND, 0);\r\n\t};\r\n\r\n\tAND() {\r\n\t    return this.getToken(FactorParser.AND, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterAnd(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitAnd(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.AndContext = AndContext;\r\n\r\nclass EqualityContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression = function(i) {\r\n\t    if(i===undefined) {\r\n\t        i = null;\r\n\t    }\r\n\t    if(i===null) {\r\n\t        return this.getTypedRuleContexts(ExpressionContext);\r\n\t    } else {\r\n\t        return this.getTypedRuleContext(ExpressionContext,i);\r\n\t    }\r\n\t};\r\n\r\n\tOP_EQ() {\r\n\t    return this.getToken(FactorParser.OP_EQ, 0);\r\n\t};\r\n\r\n\tOP_NE() {\r\n\t    return this.getToken(FactorParser.OP_NE, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterEquality(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitEquality(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.EqualityContext = EqualityContext;\r\n\r\nclass BooleanContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tTRUE() {\r\n\t    return this.getToken(FactorParser.TRUE, 0);\r\n\t};\r\n\r\n\tFALSE() {\r\n\t    return this.getToken(FactorParser.FALSE, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterBoolean(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitBoolean(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.BooleanContext = BooleanContext;\r\n\r\nclass SubExpressionContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\tOPEN_PARENS() {\r\n\t    return this.getToken(FactorParser.OPEN_PARENS, 0);\r\n\t};\r\n\r\n\texpression() {\r\n\t    return this.getTypedRuleContext(ExpressionContext,0);\r\n\t};\r\n\r\n\tCLOSE_PARENS() {\r\n\t    return this.getToken(FactorParser.CLOSE_PARENS, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterSubExpression(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitSubExpression(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.SubExpressionContext = SubExpressionContext;\r\n\r\nclass PropertyContext extends ExpressionContext {\r\n\r\n    constructor(parser, ctx) {\r\n        super(parser);\r\n        super.copyFrom(ctx);\r\n    }\r\n\r\n\texpression() {\r\n\t    return this.getTypedRuleContext(ExpressionContext,0);\r\n\t};\r\n\r\n\tPROPERTY() {\r\n\t    return this.getToken(FactorParser.PROPERTY, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterProperty(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitProperty(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nFactorParser.PropertyContext = PropertyContext;\r\n\r\nclass ProgContext extends antlr4.ParserRuleContext {\r\n\r\n    constructor(parser, parent, invokingState) {\r\n        if(parent===undefined) {\r\n            parent = null;\r\n        }\r\n        if(invokingState===undefined || invokingState===null) {\r\n            invokingState = -1;\r\n        }\r\n        super(parent, invokingState);\r\n        this.parser = parser;\r\n        this.ruleIndex = FactorParser.RULE_prog;\r\n    }\r\n\r\n\texpression() {\r\n\t    return this.getTypedRuleContext(ExpressionContext,0);\r\n\t};\r\n\r\n\tEOF() {\r\n\t    return this.getToken(FactorParser.EOF, 0);\r\n\t};\r\n\r\n\tenterRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.enterProg(this);\r\n\t\t}\r\n\t}\r\n\r\n\texitRule(listener) {\r\n\t    if(listener instanceof FactorListener ) {\r\n\t        listener.exitProg(this);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nFactorParser.ExpressionContext = ExpressionContext; \r\nFactorParser.ProgContext = ProgContext; \r\n","E:\\my-app\\src\\FactorListener.js",[],"E:\\my-app\\src\\index.js",["53"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Antlr4Test from './hw';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \n    <Antlr4Test expression=\"a^b\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","E:\\my-app\\src\\FactorLexer.js",["54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"E:\\my-app\\src\\Antlr4Test.js",["68"],"E:\\my-app\\src\\FactorErrorListener.js",[],{"ruleId":"69","severity":1,"message":"70","line":46,"column":72,"nodeType":"71","messageId":"72","endLine":46,"endColumn":73,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":48,"column":7,"nodeType":"71","messageId":"72","endLine":48,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":126,"column":13,"nodeType":"77","messageId":"78","endLine":126,"endColumn":58},{"ruleId":"75","severity":1,"message":"76","line":153,"column":8,"nodeType":"77","messageId":"78","endLine":153,"endColumn":53},{"ruleId":"79","severity":1,"message":"80","line":175,"column":10,"nodeType":"81","messageId":"82","endLine":426,"endColumn":11},{"ruleId":"83","severity":1,"message":"84","line":324,"column":24,"nodeType":"85","messageId":"86","endLine":324,"endColumn":26},{"ruleId":"83","severity":1,"message":"84","line":324,"column":35,"nodeType":"85","messageId":"86","endLine":324,"endColumn":37},{"ruleId":"87","severity":1,"message":"88","line":328,"column":26,"nodeType":"89","messageId":"90","endLine":328,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":329,"column":22,"nodeType":"81","messageId":"82","endLine":345,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":384,"column":22,"nodeType":"89","messageId":"90","endLine":384,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":431,"column":20,"nodeType":"85","messageId":"86","endLine":431,"endColumn":22},{"ruleId":"83","severity":1,"message":"84","line":431,"column":31,"nodeType":"85","messageId":"86","endLine":431,"endColumn":33},{"ruleId":"91","severity":1,"message":"92","line":436,"column":18,"nodeType":"89","messageId":"93","endLine":436,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":439,"column":22,"nodeType":"89","messageId":"90","endLine":439,"endColumn":25},{"ruleId":"79","severity":1,"message":"80","line":440,"column":18,"nodeType":"81","messageId":"82","endLine":646,"endColumn":19},{"ruleId":"83","severity":1,"message":"94","line":450,"column":44,"nodeType":"85","messageId":"86","endLine":450,"endColumn":46},{"ruleId":"83","severity":1,"message":"94","line":490,"column":44,"nodeType":"85","messageId":"86","endLine":490,"endColumn":46},{"ruleId":"91","severity":1,"message":"95","line":4,"column":8,"nodeType":"89","messageId":"93","endLine":4,"endColumn":11},{"ruleId":"69","severity":1,"message":"70","line":17,"column":45,"nodeType":"71","messageId":"72","endLine":17,"endColumn":46,"suggestions":"96"},{"ruleId":"69","severity":1,"message":"70","line":17,"column":49,"nodeType":"71","messageId":"72","endLine":17,"endColumn":50,"suggestions":"97"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":22,"nodeType":"71","messageId":"72","endLine":36,"endColumn":23,"suggestions":"98"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":30,"nodeType":"71","messageId":"72","endLine":36,"endColumn":31,"suggestions":"99"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":38,"nodeType":"71","messageId":"72","endLine":36,"endColumn":39,"suggestions":"100"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":46,"nodeType":"71","messageId":"72","endLine":36,"endColumn":47,"suggestions":"101"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":54,"nodeType":"71","messageId":"72","endLine":36,"endColumn":55,"suggestions":"102"},{"ruleId":"69","severity":1,"message":"70","line":36,"column":64,"nodeType":"71","messageId":"72","endLine":36,"endColumn":65,"suggestions":"103"},{"ruleId":"69","severity":1,"message":"70","line":43,"column":20,"nodeType":"71","messageId":"72","endLine":43,"endColumn":21,"suggestions":"104"},{"ruleId":"69","severity":1,"message":"70","line":44,"column":43,"nodeType":"71","messageId":"72","endLine":44,"endColumn":44,"suggestions":"105"},{"ruleId":"69","severity":1,"message":"70","line":59,"column":24,"nodeType":"71","messageId":"72","endLine":59,"endColumn":25,"suggestions":"106"},{"ruleId":"69","severity":1,"message":"70","line":78,"column":24,"nodeType":"71","messageId":"72","endLine":78,"endColumn":25,"suggestions":"107"},{"ruleId":"69","severity":1,"message":"70","line":102,"column":32,"nodeType":"71","messageId":"72","endLine":102,"endColumn":33,"suggestions":"108"},{"ruleId":"69","severity":1,"message":"70","line":151,"column":37,"nodeType":"71","messageId":"72","endLine":151,"endColumn":38,"suggestions":"109"},{"ruleId":"91","severity":1,"message":"110","line":17,"column":9,"nodeType":"89","messageId":"93","endLine":17,"endColumn":11},"no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["111","112"],["113","114"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'la_' is already defined.","Identifier","redeclared","no-unused-vars","'_prevctx' is assigned a value but never used.","unusedVar","Expected '===' and instead saw '=='.","'App' is defined but never used.",["115","116"],["117","118"],["119","120"],["121","122"],["123","124"],["125","126"],["127","128"],["129","130"],["131","132"],["133","134"],["135","136"],["137","138"],["139","140"],["141","142"],"'aa' is assigned a value but never used.",{"messageId":"143","fix":"144","desc":"145"},{"messageId":"146","fix":"147","desc":"148"},{"messageId":"143","fix":"149","desc":"145"},{"messageId":"146","fix":"150","desc":"148"},{"messageId":"143","fix":"151","desc":"145"},{"messageId":"146","fix":"152","desc":"148"},{"messageId":"143","fix":"153","desc":"145"},{"messageId":"146","fix":"154","desc":"148"},{"messageId":"143","fix":"155","desc":"145"},{"messageId":"146","fix":"156","desc":"148"},{"messageId":"143","fix":"157","desc":"145"},{"messageId":"146","fix":"158","desc":"148"},{"messageId":"143","fix":"159","desc":"145"},{"messageId":"146","fix":"160","desc":"148"},{"messageId":"143","fix":"161","desc":"145"},{"messageId":"146","fix":"162","desc":"148"},{"messageId":"143","fix":"163","desc":"145"},{"messageId":"146","fix":"164","desc":"148"},{"messageId":"143","fix":"165","desc":"145"},{"messageId":"146","fix":"166","desc":"148"},{"messageId":"143","fix":"167","desc":"145"},{"messageId":"146","fix":"168","desc":"148"},{"messageId":"143","fix":"169","desc":"145"},{"messageId":"146","fix":"170","desc":"148"},{"messageId":"143","fix":"171","desc":"145"},{"messageId":"146","fix":"172","desc":"148"},{"messageId":"143","fix":"173","desc":"145"},{"messageId":"146","fix":"174","desc":"148"},{"messageId":"143","fix":"175","desc":"145"},{"messageId":"146","fix":"176","desc":"148"},{"messageId":"143","fix":"177","desc":"145"},{"messageId":"146","fix":"178","desc":"148"},"removeEscape",{"range":"179","text":"180"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"181","text":"182"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"183","text":"180"},{"range":"184","text":"182"},{"range":"185","text":"180"},{"range":"186","text":"182"},{"range":"187","text":"180"},{"range":"188","text":"182"},{"range":"189","text":"180"},{"range":"190","text":"182"},{"range":"191","text":"180"},{"range":"192","text":"182"},{"range":"193","text":"180"},{"range":"194","text":"182"},{"range":"195","text":"180"},{"range":"196","text":"182"},{"range":"197","text":"180"},{"range":"198","text":"182"},{"range":"199","text":"180"},{"range":"200","text":"182"},{"range":"201","text":"180"},{"range":"202","text":"182"},{"range":"203","text":"180"},{"range":"204","text":"182"},{"range":"205","text":"180"},{"range":"206","text":"182"},{"range":"207","text":"180"},{"range":"208","text":"182"},{"range":"209","text":"180"},{"range":"210","text":"182"},{"range":"211","text":"180"},{"range":"212","text":"182"},[3389,3390],"",[3389,3389],"\\",[3479,3480],[3479,3479],[930,931],[930,930],[934,935],[934,934],[2426,2427],[2426,2426],[2434,2435],[2434,2434],[2442,2443],[2442,2442],[2450,2451],[2450,2450],[2458,2459],[2458,2458],[2468,2469],[2468,2468],[2966,2967],[2966,2966],[3069,3070],[3069,3069],[4225,4226],[4225,4225],[5701,5702],[5701,5701],[7577,7578],[7577,7577],[11413,11414],[11413,11413]]